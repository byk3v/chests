drop table if exists chest;
drop table if exists player;
drop table if exists users;
drop table if exists chest_type;
drop table if exists clan;

create table clan (
  id bigint generated by default as identity primary key,
  name text
);

create table chest_type (
  id bigint generated by default as identity primary key,
  source text
);

create table users (
  id uuid not null primary key,
  email text
);

create table player (
  id bigint generated by default as identity primary key,
  name text not null,
  clan_id bigint references clan on delete cascade not null,
  active boolean default true,
  guards_level int,
  specialists_level int,
  monsters_level int,
  might int
);

create table chest (
  id bigint generated by default as identity primary key,
  title text,
  source text,
  level int,
  player_id bigint references player on delete cascade not null,
  chest_type_id bigint references chest_type on delete cascade not null,
  uploaded_by uuid references public.users not null default auth.uid(),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);


-- Function for handling new users
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, email)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;

-- Function to Retrieve player id given the name or insert the player if it does not exist
CREATE OR REPLACE FUNCTION insert_or_get_player(player_name text, clan_id bigint, might int)
RETURNS bigint AS $$
DECLARE
    existing_player_id bigint;
BEGIN
    -- Check if player with the given name already exists
    SELECT id INTO existing_player_id FROM player WHERE name = player_name LIMIT 1;

    -- If player exists, return its ID
    IF existing_player_id IS NOT NULL THEN
        RETURN existing_player_id;
    END IF;

    -- If player doesn't exist, insert a new player
    INSERT INTO player (name, clan_id, active, might)
    VALUES (player_name, clan_id, true, might)
    RETURNING id INTO existing_player_id;

    -- Return the ID of the newly created player
    RETURN existing_player_id;
END;
$$ LANGUAGE plpgsql;

-- Function to Retrieve chestType id given the name or insert the chestType if it does not exist
CREATE OR REPLACE FUNCTION insert_or_get_chest_type(p_chest_source text)
RETURNS bigint AS $$
DECLARE
    existing_chest_type_id bigint;
BEGIN
    -- Check if chest type with the given name already exists
    SELECT id INTO existing_chest_type_id FROM chest_type WHERE source = chest_source LIMIT 1;

    -- If chest_type exists, return its ID
    IF existing_chest_type_id IS NOT NULL THEN
        RETURN existing_chest_type_id;
    END IF;

    -- If chest type doesn't exist, insert a new chest type
    INSERT INTO chest_type (source)
    VALUES (p_chest_source)
    RETURNING id INTO existing_chest_type_id;

    -- Return the ID of the newly created chest type
    RETURN existing_chest_type_id;
END;
$$ LANGUAGE plpgsql;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

---- Function to Retrieve chestType_id, player_id and insert the chest
CREATE OR REPLACE FUNCTION insert_chest_with_player_and_type(
    p_player_name text,
    p_clan_id bigint,
    p_might int,
    p_guards_lvl int,
    p_specialists_lvl int,
    p_monsters_lvl int,
    p_chest_source text,
    p_chest_level int,
    p_chest_title text,
    p_uploaded_by uuid)
RETURNS void AS $$
DECLARE
    player_id bigint;
    chest_type_id bigint;
BEGIN
    -- Insert or get player
    SELECT id INTO player_id FROM player WHERE name = p_player_name LIMIT 1;

    IF player_id IS NULL THEN
        -- Player doesn't exist, insert a new player
        INSERT INTO player (name, clan_id, active, might, guards_level, specialists_level, monsters_level)
        VALUES (p_player_name, p_clan_id, true, p_might, p_guards_lvl, p_specialists_lvl, p_monsters_lvl)
        RETURNING id INTO player_id;
    END IF;

    -- Insert or get chest type
    SELECT id INTO chest_type_id FROM chest_type WHERE source = p_chest_source LIMIT 1;

    IF chest_type_id IS NULL THEN
        -- Chest type doesn't exist, insert a new chest type
        INSERT INTO chest_type (source)
        VALUES (p_chest_source)
        RETURNING id INTO chest_type_id;
    END IF;

    -- Insert chest
    INSERT INTO chest (title, source, level, player_id, chest_type_id, uploaded_by)
    VALUES (p_chest_title, p_chest_source, p_chest_level, player_id, chest_type_id, p_uploaded_by);
END;
$$ LANGUAGE plpgsql;

INSERT INTO chest_type (source)
VALUES
    ('Bank'),
    ('Arena'),
    ('Crypt'),
    ('epic Crypt'),
    ('rare Crypt'),
    ('Citadel'),
    ('Clan wealth'),
    ('Rush tournament'),
    ('Epic inferno squad'),
    ('Epic Undead squad'),
    ('Heroic monster'),
    ('Mercenary Exchange'),
    ('Union of Triumph personal reward'),
    ('Rise of the Ancients event');

INSERT INTO clan (name)
VALUES
    ('VOV');

INSERT INTO player (name, clan_id)
VALUES
    ('Lady T', 1),
    ('Mordriel', 1),
    ('Old Dog', 1),
    ('Superretard77', 1),
    ('StormRaiser', 1),
    ('Falete', 1),
    ('Reverso', 1),
    ('Bikerdad', 1),
    ('Athena', 1),
    ('Mamba Out', 1),
    ('Giperion', 1),
    ('VaLeRa', 1),
    ('JK Sublime', 1),
    ('Shahuginn', 1),
    ('KadeT', 1),
    ('EL DRAGON', 1),
    ('ALTER EGO', 1),
    ('Murat', 1),
    ('Tran Quoc Tuan', 1),
    ('Mohammad khater', 1),
    ('Da nu na kh', 1),
    ('Shlik', 1),
    ('GokTurk', 1),
    ('Hitsu', 1),
    ('Shiv', 1),
    ('Dark Pharoah', 1),
    ('Christian', 1),
    ('Landis', 1),
    ('Waldo', 1),
    ('Dev', 1),
    ('Anaragar', 1),
    ('quiker', 1),
    ('Tanich', 1),
    ('Achilles Duong', 1),
    ('Dariing', 1),
    ('LADISLAV', 1),
    ('Kelerne', 1),
    ('Rail', 1),
    ('Kristina Dorokhina', 1),
    ('Archon', 1),
    ('ARAGORN', 1),
    ('amiral dz', 1),
    ('ZEUS', 1),
    ('aziz bey', 1),
    ('Landaswyn', 1),
    ('odysseu', 1),
    ('Mehmet', 1),
    ('Leonidas', 1),
    ('Aarezher', 1),
    ('ExclusivE', 1),
    ('Kylian The Slayer', 1),
    ('Ghost', 1),
    ('prince of persia', 1),
    ('Storm', 1),
    ('LANDLORD', 1),
    ('Tarik', 1),
    ('Mr Nimbus', 1),
    ('llValkiriall', 1),
    ('SHIVA', 1),
    ('Lancelot', 1),
    ('GOR', 1),
    ('Shatis', 1),
    ('Malobandis', 1),
    ('Begon', 1),
    ('Roronoa Zoro', 1),
    ('Romanych', 1),
    ('Speeno', 1),
    ('Volksie', 1),
    ('Moriel', 1),
    ('Peter', 1),
    ('throne de fer', 1),
    ('OLMEZ', 1),
    ('Fox Kaisa', 1),
    ('Ilkilir', 1),
    ('Beameena', 1),
    ('Slaven79', 1),
    ('Kaos', 1),
    ('Zolosho', 1),
    ('Evgeniya', 1),
    ('White Reaper', 1),
    ('Roli', 1),
    ('Nidaen', 1),
    ('DEFKALION', 1),
    ('Kloyn AdA', 1),
    ('Aegrosad', 1),
    ('Turgon', 1),
    ('Mr D', 1),
    ('Roma', 1),
    ('Shivaji', 1),
    ('Hyperion', 1),
    ('ZOVIS', 1),
    ('Cordobe', 1),
    ('Daledor', 1),
    ('Beanara', 1),
    ('Sir JK', 1),
    ('Zites', 1),
    ('Shajas', 1),
    ('Mordriel jr', 1),
    ('OD Conquest', 1);